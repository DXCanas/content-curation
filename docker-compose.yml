version: '3'

services:

  studio-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    image: learningequality/studio-app-dev
    entrypoint: python docker/entrypoint.py
    command: yarn run devserver
    depends_on:
      - minio
      - studio-postgres
      - studio-redis
      - studio-companion
    ports:
      - "8080:8080"
    environment:
      MPLBACKEND: ps
      SHELL: /bin/bash
      AWS_S3_ENDPOINT_URL: http://minio:9000
      DATA_DB_HOST: studio-postgres
      DJANGO_SETTINGS_MODULE: contentcuration.dev_settings
      RUN_MODE: docker-compose
      CELERY_TIMEZONE: America/Los_Angeles
      CELERY_REDIS_DB: 0
      CELERY_BROKER_ENDPOINT: studio-redis
      CELERY_RESULT_BACKEND_ENDPOINT: studio-redis
      CELERY_REDIS_PASSWORD: ""
    volumes:
      - .:/src

  studio-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    image: learningequality/studio-app-dev
    command: make prodceleryworkers
    depends_on:
      - minio
      - studio-postgres
      - studio-redis
    volumes:
      - .:/src
    environment:
      MPLBACKEND: ps
      SHELL: /bin/bash
      AWS_S3_ENDPOINT_URL: http://minio:9000
      DATA_DB_HOST: studio-postgres
      DJANGO_SETTINGS_MODULE: contentcuration.dev_settings
      RUN_MODE: docker-compose
      CELERY_TIMEZONE: America/Los_Angeles
      CELERY_REDIS_DB: 0
      CELERY_BROKER_ENDPOINT: studio-redis
      CELERY_RESULT_BACKEND_ENDPOINT: studio-redis
      CELERY_REDIS_PASSWORD: ""

  minio:
    image: minio/minio
    entrypoint: minio server /data
    environment:
      MINIO_ACCESS_KEY: development
      MINIO_SECRET_KEY: development
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"

  studio-postgres:
    image: postgres:9.6
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: learningequality
      POSTGRES_PASSWORD: kolibri
      POSTGRES_DB: kolibri-studio
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata

  studio-redis:
    image: redis:4.0.9

  studio-companion:
    image: transloadit/companion
    # probably not necessary, but to be safe
    volumes:
      # create anonymous volume
      - /companion_data
    environment:
      COMPANION_CLIENT_ORIGINS:
      COMPANION_DATADIR: /companion_data
      COMPANION_DOMAIN: localhost:3020
      COMPANION_DOMAINS:
      COMPANION_PROTOCOL:
      COMPANION_REDIS_URL:
      COMPANION_SECRET:
      COMPANION_DROPBOX_KEY:
      COMPANION_DROPBOX_SECRET:
      COMPANION_GOOGLE_KEY:
      COMPANION_GOOGLE_SECRET:
      COMPANION_INSTAGRAM_KEY:
      COMPANION_INSTAGRAM_SECRET:
      COMPANION_AWS_KEY:
      COMPANION_AWS_SECRET:
      COMPANION_AWS_BUCKET:
      COMPANION_AWS_REGION:
      COMPANION_OAUTH_DOMAIN:
      COMPANION_UPLOAD_URLS:
    ports:
      - "3020:3020"


volumes:
  minio_data:
  pgdata:
  companion_data:
